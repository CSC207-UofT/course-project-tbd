Clean Architecture

Our group have made sure to follow the Clean Architecture when implementing the program.
As shown in the src file, the whole program is divided into layers consisted of entities;
controllers, gateways, presenters; use cases and GUI. The inner layer was implemented in
a way that they do not know or depend on the existence of the outer layer. Specifically,
all the entities do not call upon any methods of the use cases and there are no controllers
being called in the use cases. On the other hand, the outer layer was implemented to utilize
and depend on the next inner layer without skipping any layers. Our GUI only interacts with
the controllers and gateways, controllers only have access to the use cases and the use cases
are the only layer that can modify the entities. This implementation strictly follows the
Dependency Rule which states that any one of the layers in a clean architecture can encapsulate
a dependency, those dependencies can only point inward, as the inner layers are designed
not to have any knowledge of the outer layers. The only violation to the Clean Architecture
in our program is calling an entity in the Main file (which technically a file in the controller layer).
However, this is an exception since we are allowed to call any entities in the Main file in
order to run the program.


Harry Duong
